# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI/CD for Loan API

on:
  push:
    branches: [ "main" ] #The code should only execute when someone pushes to main branch

jobs:        #jobs you want to run when someone pushes to main branch
  job1:    #this specifies that it is a build job
    runs-on: ubuntu-latest #the job will run on an ubuntu machine

    steps:
    - name: we are giving access to our repository to our workflow
      uses: actions/checkout@v4 #this should always be the first step.This gives access to github to execute
      #the above code in our github repository.

    - name: Set up Python 3.13.5 #check your python version and install the same version
      uses: actions/setup-python@v3 #this code will setup python version.
      with:
        python-version: "3.13.5"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt

    - name: Test with pytest
      run: pytest

  job2:
    needs: job1
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0v1
      with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} #configure in github
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #configure in github
            aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: flask_loan_app
          IMAGE_TAG: ${{ github.sha }}
      run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: task_definition.json
          container-name: loan_app_container
          image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: loan_app_service
          cluster: loan_app_cluster
          wait-for-service-stability: true